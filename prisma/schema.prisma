datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              String   @default("FREE")
  totalStorageUsed  Int     @default(0)
  monthlyUploads    Int     @default(0)
  lastUploadReset   DateTime @default(now())
  accounts          Account[]
  sessions          Session[]
  videos            Video[]
  allowedDomains    AllowedDomain[]
  stripeCustomerId  String?
  stripeSubscriptionId String? @unique
}

model Video {
  id          String   @id @default(cuid())
  name        String
  displayName String?
  key         String
  url         String
  userId      String
  isPublic    Boolean  @default(false)
  status      String   @default("PROCESSING")
  fileSize    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AllowedDomain {
  id        String   @id @default(cuid())
  domain    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([domain, userId])
}
