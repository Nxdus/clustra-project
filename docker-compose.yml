services:

  web:
    build: .
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./public/converted:/app/public/converted
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      macvlan_network:
        ipv4_address: 192.168.1.98  # IP ของ Web App (ต้องอยู่ในเครือข่ายเดียวกับ Nginx)

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certbot:/etc/letsencrypt
      - ./nginx/www:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: always
    networks:
      macvlan_network:
        ipv4_address: 192.168.1.97  # IP ของ Nginx (Gateway ของ Network นี้)

  certbot:
    image: certbot/dns-cloudflare
    volumes:
      - ./nginx/certbot:/etc/letsencrypt
      - ./nginx/www:/usr/share/nginx/html
      - ./cloudflare.ini:/root/.secrets/cloudflare.ini
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CF_API_EMAIL=paitong1550@gmail.com
      - CF_API_KEY=f97fefab948554e23434b12f91f706b1a39ac
    command: certificates
    entrypoint: |
      /bin/sh -c 'apk add --no-cache docker-cli
      trap "exit 0" TERM
      while :; do
        certbot renew --dns-cloudflare --dns-cloudflare-credentials /root/.secrets/cloudflare.ini --quiet
        docker exec $$(docker ps -q -f name=nginx) nginx -s reload
        sleep 3d & wait $$!
      done'
    depends_on:
      - nginx
    networks:
      - macvlan_network

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - macvlan_network

networks:
  macvlan_network:
    external: true

volumes:
  pgdata:
